<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ssic.game.common.mapper.ProcessExMapper">


	<select id="findProcess" resultType="com.ssic.game.common.dto.ProcessDto">
		SELECT
		id as id,
		proj_id as projId,
		(select a.proj_name from t_ims_project a where a.id = proj_id) as projName,
		proc_name as procName,
		describes as describes ,
		isDefine as isdefine,
		start_task as startTask,
		stat as stat,
		start_date
		as startDate,
		end_date as endDate,
		state as state,
		last_update_time as lastUpdateTime,
		create_time as createTime,
		img_url as imageUrl
		FROM
		t_ims_process
		where
		stat =1
		<include refid="where_clause_1" />
		order by create_time desc 
	</select>

   <select id="findProcessALL" resultType="com.ssic.game.common.dto.ProcessDto">
     SELECT
		id as id,
		proj_id as projId,
		(select a.proj_name from t_ims_project a where a.id = proj_id) as projName,
		proc_name as procName,
		describes as describes ,
		isDefine as isdefine,
		start_task as startTask,
		stat as stat,
		start_date
		as startDate,
		end_date as endDate,
		state as state,
		last_update_time as lastUpdateTime,
		create_time as createTime,
		img_url as imageUrl
		FROM
		t_ims_process
		where
		stat =1
		<include refid="where_clause_1" />
		order by create_time desc  
		limit #{page.beginRow},#{page.rows}
   </select>

   <select id="findCount" resultType="Integer">
      select count(*) from t_ims_process where stat=1 
      <include refid="where_clause_1" />
   </select>

 
	<sql id="where_clause_1">
		<if test="process.projId!=null and process.projId!=''">
			and proj_id = #{process.projId}
		</if>
		<if test="process.id!=null and process.id!=''">
			and id = #{process.id}
		</if>
		<if test="process.procName!=null and process.procName!=''">
			and proc_name = #{process.procName}
		</if>
		<if test="process.describes!=null and process.describes!=''">
			and describes = #{process.describes}
		</if>
		<if test="process.isdefine!=null ">
			and isDefine = #{process.isdefine}
		</if>
		<if test="process.startTask!= null">
			and start_task = #{process.startTask}
		</if>
		<if test="process.stat!= null">
			and stat = #{process.stat}
		</if>
		<if test="process.state!=null ">
			and state = #{process.state}
		</if>
	</sql>

	<insert id="insertPro" parameterType="com.ssic.game.common.pojo.Process">
		INSERT INTO t_ims_process (
		id,
		proj_id,
		proc_name,
		img_url,
		describes,
		isdefine,
		start_task,
		stat,
		start_date,
		end_date,
		state,
		create_time
		)
		VALUES
		(
		#{process.id},
		#{process.projId},
		#{process.procName},
		#{process.imgUrl},
		#{process.describes},
		#{process.isdefine},
		#{process.startTask},
		#{process.stat},
		#{process.startDate},
		#{process.endDate},
		#{process.state},
		#{process.createTime}
		)

	</insert>

	<update id="updatePro" parameterType="com.ssic.game.common.pojo.Process">
		UPDATE t_ims_process
		SET proj_id =#{process.projId},
		proc_name =#{process.procName}, 
		img_url =#{process.imgUrl}, 
		describes =#{process.describes}, 
		isdefine =#{process.isdefine}, 
		start_task =#{process.startTask}, 
		start_date =#{process.startDate},
		end_date =#{process.endDate}, 
		state =#{process.state}
		WHERE
		id =#{process.id}
	</update>

    <update id="deletePro" parameterType="com.ssic.game.common.pojo.Process">
       update t_ims_process set stat =0 where id=#{process.id}
    </update>
    
    <select id="findInst" resultType="com.ssic.game.common.pojo.Process">
       select id,proj_id,proc_id from t_ims_proc_instance where proc_id = #{process.id}
    </select>
    
    <update id="insertImageUrl" parameterType="com.ssic.game.common.dto.ProcessDto">
       update t_ims_process set img_url =#{process.imageUrl} ,last_update_time = #{process.lastUpdateTime}  where id =#{process.id}
    </update>
    
    <update id="updateStarTask" parameterType="com.ssic.game.common.dto.ProcessDto">
       update  t_ims_process set start_task=#{process.startTask},isDefine=#{process.isdefine},last_update_time = #{process.lastUpdateTime}    where id=#{process.id}
    </update>
    
    <select id="getLoadProcess" parameterType="String" resultType="Map">
    select user_account as userAccount, process.proc_name as procName, task.proj_id as projId, process.id processId from 
(
select userField.user_account, userField.task_id from 
(select userTask.*, field.id field_id from 
(select users.id user_id,  user_account, task.id task_id, form_id from 
(select id, user_account from t_ims_users where stat=1 and id = #{userId}) users,
(select id, form_id from t_ims_tasks where form_id is not null and stat = 1 and type=1) task
) userTask
left join t_ims_fields field on field.form_id = userTask.form_id and field.stat=1
) userField 
left join t_ims_field_user field_user on userField.field_id = field_user.field_id 
and userField.user_id = field_user.user_id and field_user.stat=1
where field_user.id is not null
union 
select userTask2.user_account user_account, userTask2.task_id  from 
(select users.id user_id,  user_account, task.id task_id, proj_id, proc_id from 
(select id, name, user_account from t_ims_users where stat=1 and id= #{userId}) users,
(select id, name, proj_id, proc_id from t_ims_tasks where stat = 1 and type=1) task
) userTask2
left join t_ims_actions action on userTask2.task_id = action.task_id and action.stat=1
left join t_ims_action_user action_user on action_user.user_id = userTask2.user_id 
and action.id = action_user.action_id and action_user.stat=1
where action_user.id is not null
UNION
select userTask.user_account, userTask.task_id from (
select users.role_id role_id, user_account, task.id task_id, form_id from 
(select users.id, user_account, role_users.role_id from t_ims_users users
left join t_ims_role_users role_users on users.id = role_users.user_id and role_users.stat=1 
where users.stat=1 and role_id is not null and users.id= #{userId}) users,
(select id, form_id from t_ims_tasks where form_id is not null and stat = 1 and type=1) task
) userTask
left join t_ims_fields field on field.form_id = userTask.form_id and field.stat=1
left join t_ims_field_role field_role on field.id = field_role.field_id 
and userTask.role_id = field_role.role_id and field_role.stat=1
where field_role.id is not null
UNION
select userTask.user_account user_account, userTask.task_id  from 
(
select users.role_id role_id, user_account, task.id task_id, form_id from 
(select users.id, user_account, role_users.role_id from t_ims_users users
left join t_ims_role_users role_users on users.id = role_users.user_id and role_users.stat=1 
where users.stat=1 and role_id is not null and users.id= #{userId}) users,
(select id, form_id from t_ims_tasks where form_id is not null and stat = 1 and type=1) task
) userTask
left join t_ims_actions action on userTask.task_id = action.task_id and action.stat=1
left join t_ims_action_role action_role on action_role.role_id = userTask.role_id
and action.id = action_role.action_id and action_role.stat=1
where action_role.id is not null
) userTask
left join t_ims_tasks task on userTask.task_id = task.id
left join t_ims_process process on process.id = task.proc_id
    </select>
    
</mapper>